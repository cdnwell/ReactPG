{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cdnwe\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\[node]ReactStudy\\\\23-react-authentication\\\\01-starting-project\\\\src\\\\components\\\\store\\\\auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\n// 헬퍼 함수\nconst calculateRemainingTime = expirationTime => {\n  // 남은 시간은 밀리 세컨드로\n  const currentTime = new Date().getTime(); // 현재 타임 스탬프, 밀리 세컨드로\n  // 만료 시간은 문자열이 된다.\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\nexport const AuthContextProvider = props => {\n  _s();\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token;\n  const loginHandler = (token, expirationTime) => {\n    // 토근 저장\n    // 브라우저에 내장된 API\n    // 키 밸류 쌍을 저장함\n    // 로컬 저장소는 기본 데이터만 저장할 수 있어 객체를 저장하고 싶다면\n    // 우선 데이터를 JSON으로 바꿔야 합니다. 그럼 문자열이 되서 저장가능해집니다.\n    localStorage.setItem(\"token\", token);\n    setToken(token);\n    const remainingTime = calculateRemainingTime(expirationTime);\n\n    // 타이머 설정\n    // 타이머가 만료되면 사용자를 로그아웃합니다.\n    setTimeout(logoutHandler, remainingTime);\n  };\n  const logoutHandler = () => {\n    localStorage.removeItem(\"token\");\n    setToken(null);\n  };\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","loginHandler","setItem","remainingTime","setTimeout","logoutHandler","removeItem","contextValue","children"],"sources":["C:/Users/cdnwe/OneDrive/바탕 화면/[node]ReactStudy/23-react-authentication/01-starting-project/src/components/store/auth-context.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n\r\n// 헬퍼 함수\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  // 남은 시간은 밀리 세컨드로\r\n  const currentTime = new Date().getTime();  // 현재 타임 스탬프, 밀리 세컨드로\r\n  // 만료 시간은 문자열이 된다.\r\n  const adjExpirationTime = new Date(expirationTime).getTime();\r\n\r\n  const remainingDuration = adjExpirationTime - currentTime;\r\n\r\n  return remainingDuration;\r\n};\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const initialToken = localStorage.getItem(\"token\");\r\n  const [token, setToken] = useState(initialToken);\r\n\r\n  const userIsLoggedIn = !!token;\r\n\r\n  const loginHandler = (token, expirationTime) => {\r\n    // 토근 저장\r\n    // 브라우저에 내장된 API\r\n    // 키 밸류 쌍을 저장함\r\n    // 로컬 저장소는 기본 데이터만 저장할 수 있어 객체를 저장하고 싶다면\r\n    // 우선 데이터를 JSON으로 바꿔야 합니다. 그럼 문자열이 되서 저장가능해집니다.\r\n    localStorage.setItem(\"token\", token);\r\n    setToken(token);\r\n\r\n    const remainingTime = calculateRemainingTime(expirationTime)\r\n\r\n    // 타이머 설정\r\n    // 타이머가 만료되면 사용자를 로그아웃합니다.\r\n    setTimeout(logoutHandler, remainingTime);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"token\");\r\n    setToken(null);\r\n  };\r\n\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAa,CAAC;EACtCC,KAAK,EAAE,EAAE;EACTC,UAAU,EAAE,KAAK;EACjBC,KAAK,EAAGF,KAAK,IAAK,CAAC,CAAC;EACpBG,MAAM,EAAE,MAAM,CAAC;AACjB,CAAC,CAAC;;AAEF;AACA,MAAMC,sBAAsB,GAAIC,cAAc,IAAK;EACjD;EACA,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,CAAC,CAAE;EAC3C;EACA,MAAMC,iBAAiB,GAAG,IAAIF,IAAI,CAACF,cAAc,CAAC,CAACG,OAAO,EAAE;EAE5D,MAAME,iBAAiB,GAAGD,iBAAiB,GAAGH,WAAW;EAEzD,OAAOI,iBAAiB;AAC1B,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAAA;EAC5C,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAClD,MAAM,CAACf,KAAK,EAAEgB,QAAQ,CAAC,GAAGnB,QAAQ,CAACgB,YAAY,CAAC;EAEhD,MAAMI,cAAc,GAAG,CAAC,CAACjB,KAAK;EAE9B,MAAMkB,YAAY,GAAG,CAAClB,KAAK,EAAEK,cAAc,KAAK;IAC9C;IACA;IACA;IACA;IACA;IACAS,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEnB,KAAK,CAAC;IACpCgB,QAAQ,CAAChB,KAAK,CAAC;IAEf,MAAMoB,aAAa,GAAGhB,sBAAsB,CAACC,cAAc,CAAC;;IAE5D;IACA;IACAgB,UAAU,CAACC,aAAa,EAAEF,aAAa,CAAC;EAC1C,CAAC;EAED,MAAME,aAAa,GAAG,MAAM;IAC1BR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCP,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAED,MAAMQ,YAAY,GAAG;IACnBxB,KAAK,EAAEA,KAAK;IACZC,UAAU,EAAEgB,cAAc;IAC1Bf,KAAK,EAAEgB,YAAY;IACnBf,MAAM,EAAEmB;EACV,CAAC;EAED,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEE,YAAa;IAAA,UACvCZ,KAAK,CAACa;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B,CAAC;AAAC,GAvCWd,mBAAmB;AAAA,KAAnBA,mBAAmB;AAyChC,eAAeb,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}