{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cdnwe\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\[node]ReactStudy\\\\23-react-authentication\\\\01-starting-project\\\\src\\\\components\\\\store\\\\auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// 타이머 전역변수로 선언\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\n// 헬퍼 함수\nconst calculateRemainingTime = expirationTime => {\n  // 남은 시간은 밀리 세컨드로\n  const currentTime = new Date().getTime(); // 현재 타임 스탬프, 밀리 세컨드로\n  // 만료 시간은 문자열이 된다.\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\n// 헬퍼 함수\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n  if (remainingTime <= 3600) {\n    // 토큰이 아니라 널을 리턴합니다.\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  }\n\n  // 남은 시간이 있어서 유효한 토큰이 잇다면 그때는 저장된 토큰을 반환합니다.\n  // 그리고 저장된 토큰 뿐만아니라 남은 시간도 리턴해 적절한 타이머가 설정 가능하게 합니다.\n  return {\n    token: storedToken,\n    duration: remainingTime\n  };\n};\nexport const AuthContextProvider = props => {\n  _s();\n  const tokenData = retrieveStoredToken();\n  let initialToken;\n  if (tokenData) {\n    initialToken = tokenData.token;\n    // 타이머 설정은 여기서 할 수 없다.\n  }\n\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token;\n  const loginHandler = (token, expirationTime) => {\n    // 토근 저장\n    // 브라우저에 내장된 API\n    // 키 밸류 쌍을 저장함\n    // 로컬 저장소는 기본 데이터만 저장할 수 있어 객체를 저장하고 싶다면\n    // 우선 데이터를 JSON으로 바꿔야 합니다. 그럼 문자열이 되서 저장가능해집니다.\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    // 로그인 할 때마다 만료 시간을 저장합니다.\n    localStorage.setItem(\"expirationTime\", expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime);\n\n    // 타이머 설정\n    // 타이머가 만료되면 사용자를 로그아웃합니다.\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n  const logoutHandler = () => {\n    localStorage.removeItem(\"token\");\n    setToken(null);\n\n    // 로그아웃을 했다면 타이머를 없애준다.\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n  useEffect(() => {\n    if (tokenData) {\n      console.log(tokenData.duration);\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData]);\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"w4PGjzwU+znkNWWv/cmJxDZqQPE=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","retrieveStoredToken","storedToken","localStorage","getItem","storedExpirationDate","remainingTime","removeItem","duration","AuthContextProvider","props","tokenData","initialToken","setToken","userIsLoggedIn","loginHandler","setItem","setTimeout","logoutHandler","clearTimeout","console","log","contextValue","children"],"sources":["C:/Users/cdnwe/OneDrive/바탕 화면/[node]ReactStudy/23-react-authentication/01-starting-project/src/components/store/auth-context.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n// 타이머 전역변수로 선언\r\nlet logoutTimer;\r\n\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n\r\n// 헬퍼 함수\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  // 남은 시간은 밀리 세컨드로\r\n  const currentTime = new Date().getTime(); // 현재 타임 스탬프, 밀리 세컨드로\r\n  // 만료 시간은 문자열이 된다.\r\n  const adjExpirationTime = new Date(expirationTime).getTime();\r\n\r\n  const remainingDuration = adjExpirationTime - currentTime;\r\n\r\n  return remainingDuration;\r\n};\r\n\r\n// 헬퍼 함수\r\nconst retrieveStoredToken = () => {\r\n  const storedToken = localStorage.getItem(\"token\");\r\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\r\n\r\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\r\n\r\n  if (remainingTime <= 3600) {\r\n    // 토큰이 아니라 널을 리턴합니다.\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expirationTime\");\r\n    return null;\r\n  }\r\n\r\n  // 남은 시간이 있어서 유효한 토큰이 잇다면 그때는 저장된 토큰을 반환합니다.\r\n  // 그리고 저장된 토큰 뿐만아니라 남은 시간도 리턴해 적절한 타이머가 설정 가능하게 합니다.\r\n  return {\r\n    token: storedToken,\r\n    duration: remainingTime,\r\n  };\r\n};\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const tokenData = retrieveStoredToken();\r\n  let initialToken;\r\n  if (tokenData) {\r\n    initialToken = tokenData.token;\r\n    // 타이머 설정은 여기서 할 수 없다.\r\n  }\r\n\r\n  const [token, setToken] = useState(initialToken);\r\n\r\n  const userIsLoggedIn = !!token;\r\n\r\n  const loginHandler = (token, expirationTime) => {\r\n    // 토근 저장\r\n    // 브라우저에 내장된 API\r\n    // 키 밸류 쌍을 저장함\r\n    // 로컬 저장소는 기본 데이터만 저장할 수 있어 객체를 저장하고 싶다면\r\n    // 우선 데이터를 JSON으로 바꿔야 합니다. 그럼 문자열이 되서 저장가능해집니다.\r\n    setToken(token);\r\n    localStorage.setItem(\"token\", token);\r\n    // 로그인 할 때마다 만료 시간을 저장합니다.\r\n    localStorage.setItem(\"expirationTime\", expirationTime);\r\n\r\n    const remainingTime = calculateRemainingTime(expirationTime);\r\n\r\n    // 타이머 설정\r\n    // 타이머가 만료되면 사용자를 로그아웃합니다.\r\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"token\");\r\n    setToken(null);\r\n\r\n    // 로그아웃을 했다면 타이머를 없애준다.\r\n    if (logoutTimer) {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{\r\n    if(tokenData) {\r\n      console.log(tokenData.duration);\r\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\r\n    }\r\n  },[tokenData]);\r\n\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}