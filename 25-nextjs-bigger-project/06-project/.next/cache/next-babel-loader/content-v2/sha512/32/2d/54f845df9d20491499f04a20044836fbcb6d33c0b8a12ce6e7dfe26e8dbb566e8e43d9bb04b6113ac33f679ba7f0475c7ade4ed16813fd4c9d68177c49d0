{"ast":null,"code":"import { MongoClient } from 'mongodb'; // /api/net-meetup\n\nasync function handler(req, res) {\n  console.log(req.method);\n\n  if (req.method === 'POST') {\n    const data = req.body; // fpm.mongodb.net/meetups?\n    // fpm.mongodb.net/저장할 장소이름?\n\n    const client = await MongoClient.connect('mongodb+srv://cdnwellhk:L2uczUlpLFurEkew@cluster0.ubf7fpm.mongodb.net/meetups?retryWrites=true&w=majority');\n    const db = client.db(); // collection 안의 string은 컬렉션의 이름\n\n    const meetupsCollection = db.collection('meetups'); // 컬렉션에 새 문서를 삽입하기 위해 구축된 query 명령 중 하나인 insertOne을 호출할 수 있습니다. \n    // MongoDB의 훌륭한 점은 문서가 결국 object, 자바스크립트의 object라는 겁니다. 따라서 object의 제목, 이미지, 주소, 설명\n    // 이 될 수 있습니다.\n    // 직접 데이터를 삽입할 수 있으므로 전체 데이터 객체를 데이터베이스에 저장할 수 있게 됩니다.\n    // destructuring을 사용할 필요도 없습니다.\n    // 이제 이 데이터 객체를 데이터베이스에 삽입해 보겠습니다. \n\n    const result = await meetupsCollection.insertOne(data); //insertOne은 promise를 되돌리므로 await를 입력하여 결과값을 돌려받을 수 있습니다. \n    // 오류 처리를 추가해도 됩니다.\n\n    console.log(result); // 데이터 베이스와 연결 차단\n\n    client.close(); // 되돌아오는 응답의 HTTP status 코드를 설정하기 위해 응답을 호출할 수 있는 status method를 갖게 되는데\n    // 예를 들어, 201 status 코드는 어떤 것이 성공적으로 삽입되었음을 나타냅니다. \n    // 그런 다음, 여기서 JSON 호출을 연결하여 발신 응답에 추가될 JSON 데이터를 준비할 수 있습니다.\n    // message를 입력할 수도 있습니다. \n    // 물론, 어떤 응답이 되돌아오게 할지는 여러분이 선택하시면 됩니다.\n    // 데이터베이스에 meetups를 삽입할 기본 api 경로를 가지고 있으므로\n    // 다음 단계에서는 이 api 경로를 trigger하고 코드를 사용할 수 있도록\n    // 이 React Meetups 정보를 작성 및 제출하여 이 api 경로에 request를 보내도록 합니다.\n\n    res.status(201).json({\n      message: 'Meetup inserted!'\n    });\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["C:/Users/cdnwe/OneDrive/바탕 화면/[node]ReactStudy/25-nextjs-bigger-project/06-project/pages/api/new-meetup.js"],"names":["MongoClient","handler","req","res","console","log","method","data","body","client","connect","db","meetupsCollection","collection","result","insertOne","close","status","json","message"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B,C,CAEA;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,MAAhB;;AAEA,MAAIJ,GAAG,CAACI,MAAJ,KAAe,MAAnB,EAA2B;AACvB,UAAMC,IAAI,GAAGL,GAAG,CAACM,IAAjB,CADuB,CAGvB;AACA;;AACA,UAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,2GAApB,CAArB;AACA,UAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CANuB,CAQvB;;AACA,UAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CATuB,CAWvB;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMC,MAAM,GAAG,MAAMF,iBAAiB,CAACG,SAAlB,CAA4BR,IAA5B,CAArB,CAjBuB,CAmBvB;AACA;;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ,EArBuB,CAuBvB;;AACAL,IAAAA,MAAM,CAACO,KAAP,GAxBuB,CA0BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAb,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,MAAAA,OAAO,EAAG;AADO,KAArB;AAGH;AACJ;;AAED,eAAelB,OAAf","sourcesContent":["import { MongoClient } from 'mongodb';\r\n\r\n// /api/net-meetup\r\n\r\nasync function handler(req, res) {\r\n    console.log(req.method);\r\n\r\n    if (req.method === 'POST') {\r\n        const data = req.body;\r\n\r\n        // fpm.mongodb.net/meetups?\r\n        // fpm.mongodb.net/저장할 장소이름?\r\n        const client = await MongoClient.connect('mongodb+srv://cdnwellhk:L2uczUlpLFurEkew@cluster0.ubf7fpm.mongodb.net/meetups?retryWrites=true&w=majority');\r\n        const db = client.db();\r\n\r\n        // collection 안의 string은 컬렉션의 이름\r\n        const meetupsCollection = db.collection('meetups');\r\n\r\n        // 컬렉션에 새 문서를 삽입하기 위해 구축된 query 명령 중 하나인 insertOne을 호출할 수 있습니다. \r\n        // MongoDB의 훌륭한 점은 문서가 결국 object, 자바스크립트의 object라는 겁니다. 따라서 object의 제목, 이미지, 주소, 설명\r\n        // 이 될 수 있습니다.\r\n        // 직접 데이터를 삽입할 수 있으므로 전체 데이터 객체를 데이터베이스에 저장할 수 있게 됩니다.\r\n        // destructuring을 사용할 필요도 없습니다.\r\n        // 이제 이 데이터 객체를 데이터베이스에 삽입해 보겠습니다. \r\n        const result = await meetupsCollection.insertOne(data);\r\n\r\n        //insertOne은 promise를 되돌리므로 await를 입력하여 결과값을 돌려받을 수 있습니다. \r\n        // 오류 처리를 추가해도 됩니다.\r\n        console.log(result);\r\n\r\n        // 데이터 베이스와 연결 차단\r\n        client.close();\r\n\r\n        // 되돌아오는 응답의 HTTP status 코드를 설정하기 위해 응답을 호출할 수 있는 status method를 갖게 되는데\r\n        // 예를 들어, 201 status 코드는 어떤 것이 성공적으로 삽입되었음을 나타냅니다. \r\n        // 그런 다음, 여기서 JSON 호출을 연결하여 발신 응답에 추가될 JSON 데이터를 준비할 수 있습니다.\r\n        // message를 입력할 수도 있습니다. \r\n        // 물론, 어떤 응답이 되돌아오게 할지는 여러분이 선택하시면 됩니다.\r\n        // 데이터베이스에 meetups를 삽입할 기본 api 경로를 가지고 있으므로\r\n        // 다음 단계에서는 이 api 경로를 trigger하고 코드를 사용할 수 있도록\r\n        // 이 React Meetups 정보를 작성 및 제출하여 이 api 경로에 request를 보내도록 합니다.\r\n        res.status(201).json({\r\n            message : 'Meetup inserted!'\r\n        });\r\n    }\r\n}\r\n\r\nexport default handler;"]},"metadata":{},"sourceType":"module"}